__all__ = ['NamespaceOne','NamespaceTwo']
from typing import Tuple, Set, Iterable, List


class DictionaryParameters:
    def __init__(self, param: Dictionary): ...
    def Method(self, param: Dictionary) -> None: ...
    def ReturnDictionary(self) -> Dictionary: ...


class ListParameters:
    def __init__(self, param: List): ...
    def Method(self, param: List) -> None: ...
    def ReturnList(self) -> List: ...


class OverloadingMethods:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, param: int): ...
    @overload
    def __init__(self, param: Single): ...
    @overload
    def OverloadedMethod(self) -> None: ...
    @overload
    def OverloadedMethod(self, param: int) -> None: ...
    @overload
    def OverloadedMethod(self, param: Single) -> None: ...
    @overload
    def StaticOverloadedMethod() -> None: ...
    @overload
    def StaticOverloadedMethod(param: int) -> None: ...
    @overload
    def StaticOverloadedMethod(param: Single) -> None: ...


class Properties:
    def __init__(self): ...
    @property
    def GetProperty(self) -> int: ...
    @property
    def GetSetProperty(self) -> int: ...
    @property
    def StaticGetProperty() -> int: ...
    @property
    def StaticGetSetProperty() -> int: ...
    @GetSetProperty.setter
    def GetSetProperty(self, value: int) -> None: ...
    @StaticGetSetProperty.setter
    def StaticGetSetProperty(value: int) -> None: ...


class PublicClass:
    def __init__(self): ...


class SingleVsFloatParameters:
    def __init__(self, param: Single): ...
    def Method(self, param: Single) -> None: ...
    def ReturnFloat(self) -> Single: ...


class StaticMethods:
    def __init__(self): ...
    def StaticMethod() -> None: ...
    @overload
    def StaticOverloadedMethod() -> None: ...
    @overload
    def StaticOverloadedMethod(param: int) -> None: ...
