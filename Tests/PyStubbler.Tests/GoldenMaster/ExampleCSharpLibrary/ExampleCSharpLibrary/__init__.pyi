__all__ = ['NamespaceOne','NamespaceTwo']
from typing import Tuple, Set, Iterable, List, overload


class Arrays:
    def __init__(self): ...
    @property
    def Property(self) -> Set(str): ...
    @overload
    def Method(self, something: Set(str)) -> None: ...
    @overload
    def Method(self, something: Set(Set(str))) -> None: ...
    @overload
    def Method(self, something: List) -> None: ...


class BaseClass:
    def __init__(self): ...


class DictionaryParameters:
    def __init__(self, param: Dictionary): ...
    def Method(self, param: Dictionary) -> None: ...
    def ReturnDictionary(self) -> Dictionary: ...


class EmptyClass:
    pass


class Enumerables:
    def __init__(self): ...
    def Enumerable(self, enumerable: IEnumerable) -> None: ...
    def EnumerableGeneric(self, genericEnumerable: Iterable[T]) -> None: ...
    def EnumerableString(self, stringEnumerable: Iterable[str]) -> None: ...
    def ReturnEnumerable(self) -> IEnumerable: ...
    def ReturnEnumerableGeneric(self) -> Iterable[T]: ...
    def ReturnEnumerableString(self) -> Iterable[str]: ...


class FloatAndDoubleParameters:
    @overload
    def __init__(self, param: float): ...
    @overload
    def __init__(self, param: float): ...
    @overload
    def Method(self, param: float) -> None: ...
    @overload
    def Method(self, param: float) -> None: ...
    def ReturnDouble(self) -> float: ...
    def ReturnFloat(self) -> float: ...




class ListParameters:
    @overload
    def __init__(self, param: List): ...
    @overload
    def __init__(self, param: List[str]): ...
    @overload
    def Method(self, param: List) -> None: ...
    @overload
    def Method(self, param: List[str]) -> None: ...
    def ReturnIList(self) -> List[str]: ...
    def ReturnList(self) -> List: ...


class MultipleConstructors:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, str: str): ...
    @overload
    def __init__(self, str: str, i: int): ...


class NonObsoleteClass:
    def __init__(self): ...
    @property
    def NonObsoleteProperty(self) -> str: ...
    @property
    def ObsoleteProperty(self) -> str: ...
    def NonObsoleteMethod(self) -> None: ...
    @staticmethod
    def NonObsoleteStaticMethod() -> None: ...


class OutParams:
    def __init__(self): ...
    @overload
    def GetSomething(self) -> Tuple[int]: ...
    @overload
    def GetSomething(self) -> Tuple[str]: ...
    def TryGetSomething(self) -> Tuple[bool, Object]: ...


class OverloadingMethods:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, param: int): ...
    @overload
    def __init__(self, param: float): ...
    @overload
    def OverloadedMethod(self) -> None: ...
    @overload
    def OverloadedMethod(self, param: int) -> None: ...
    @overload
    def OverloadedMethod(self, param: float) -> None: ...
    @staticmethod
    @overload
    def StaticOverloadedMethod() -> None: ...
    @staticmethod
    @overload
    def StaticOverloadedMethod(param: int) -> None: ...
    @staticmethod
    @overload
    def StaticOverloadedMethod(param: float) -> None: ...


class Properties:
    def __init__(self): ...
    @property
    def GetProperty(self) -> int: ...
    @property
    def GetSetProperty(self) -> int: ...
    @staticmethod
    @property
    def StaticGetProperty() -> int: ...
    @staticmethod
    @property
    def StaticGetSetProperty() -> int: ...
    @GetSetProperty.setter
    def GetSetProperty(self, value: int) -> None: ...
    @staticmethod
    @StaticGetSetProperty.setter
    def StaticGetSetProperty(value: int) -> None: ...


class PublicClass:
    def __init__(self): ...


class PublicEnum:
    #None = 0
    One = 1
    Two = 2
    Three = 3


class RefParams:
    def __init__(self): ...
    @overload
    def GetSomething(self, value: int) -> Tuple[int]: ...
    @overload
    def GetSomething(self, value: str) -> Tuple[str]: ...
    def TryGetSomething(self, value: Object) -> Tuple[bool, Object]: ...


class StaticMethods:
    def __init__(self): ...
    @staticmethod
    def StaticMethod() -> None: ...
    @staticmethod
    @overload
    def StaticOverloadedMethod() -> None: ...
    @staticmethod
    @overload
    def StaticOverloadedMethod(param: int) -> None: ...


class SubClass(BaseClass):
    def __init__(self): ...


class UnsafePythonNames:
    def __init__(self): ...
    @staticmethod
    @property
    def None() -> int: ...
    def Method(self, from_: int) -> None: ...
